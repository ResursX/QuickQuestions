@model QuickQuestions.Models.SurveyResultsViewModel

@{
    ViewData["Title"] = "Результаты опроса";
}

<div class="row justify-content-center">
    <div class="col-md-9">
        <h1>Результаты для опроса @Html.DisplayFor(model => model.Survey.Name)</h1>

        <div>
            <dl class="row">
                <dt class="col-sm-2">
                    Количество ответов
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Survey.SurveyResults.Count)
                </dd>
                <dt class="col-sm-2">
                    Самый активный отдел
                </dt>
                <dd class="col-sm-10">
                    @{
                        if (Model.MostActiveBranch != null)
                        {
                            @Html.DisplayFor(model => model.MostActiveBranch.Name);
                        }
                        else
                        {
                            @Html.Display("No branch");
                        }
                    }
                </dd>
            </dl>

            <div class="row container g-2 mb-3">
                <div class="row g-2 align-items-end justify-content-center results-container">
                    @foreach (var questionResult in Model.QuestionResults.Where(qr => !qr.CustomOnly))
                    {
                        <div class="col-md-6 col-lg-4 mt-0 justify-content-center">
                            <h4 class="text-center">@Html.DisplayFor(model => questionResult.Text)</h4>
                            <canvas class="chart"></canvas>
                        </div>
                    }
                </div>
            </div>

            @{
                if (Model.QuestionBranchResults != null)
                {
                    <div class="row mb-3">
                        <h2>Результаты отдела</h2>
                    </div>

                    <div class="row container g-2 mb-3">
                        <div class="row g-2 align-items-end justify-content-center branch-results-container">
                            @foreach (var questionResult in Model.QuestionResults.Where(qr => !qr.CustomOnly))
                            {
                                <div class="col-md-6 col-lg-4 mt-0 justify-content-center">
                                    <h4 class="text-center">@Html.DisplayFor(model => questionResult.Text)</h4>
                                    <canvas class="chart"></canvas>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>



@section Scripts {
    <script src="~/lib/Chart.js/chart.min.js"></script>
    <script src="~/lib/google-palette/palette.min.js"></script>

    <script type="text/javascript">
        let questionText = @Html.Raw(Json.Serialize(Model.QuestionResults.Where(qr => !qr.CustomOnly).Select(qr => qr.Text)));
        let questionAnswerText = @Html.Raw(Json.Serialize(Model.QuestionResults.Where(qr => !qr.CustomOnly).Select(qr => qr.AnswerResults.Select(ar => ar.Text))));
        let questionAnswerResult = @Html.Raw(Json.Serialize(Model.QuestionResults.Where(qr => !qr.CustomOnly).Select(qr => qr.AnswerResults.Select(ar => ar.Count))));

        function DrawCharts(container, results)
        {
            $(container).children().each(function (i) {
                var ctx = $(this).children('.chart');
                var pal = palette('mpn65', questionAnswerText[i].length).map(function (hex) {
                    return '#' + hex;
                });

                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: questionAnswerText[i],
                        datasets: [{
                            label: questionText[i],
                            data: results[i],
                            backgroundColor: pal
                        }]
                    }
                });
            });
        }

        DrawCharts('.results-container', questionAnswerResult);

        @{
            if(Model.QuestionBranchResults != null)
                {
                    @:let questionAnswerBranchResult = @Html.Raw(Json.Serialize(Model.QuestionBranchResults.Where(qr => !qr.CustomOnly).Select(qr => qr.AnswerResults.Select(ar => ar.Count))));

                    @:DrawCharts('.branch-results-container', questionAnswerBranchResult);
                }
        }
    </script>
}