@model QuickQuestions.Models.SurveyResultsViewModel

@{
    ViewData["Title"] = "Survey Results";
}

<h1>@Html.DisplayFor(model => model.Survey.Name)</h1>
<h2>Results</h2>

<div>
    <dl class="row">
        <dt class="col-sm-2">
            Number of answers
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Survey.SurveyResults.Count)
        </dd>
        <dt class="col-sm-2">
            Most active branch
        </dt>
        <dd class="col-sm-10">
            @{
                if (Model.MostActiveBranch != null)
                {
                    @Html.DisplayFor(model => model.MostActiveBranch.Name);
                }
                else
                {
                    @Html.Display("No branch");
                }
            }
        </dd>
    </dl>

    <div class="row">
        <div class="results-container col">
            @foreach (var questionResult in Model.QuestionResults)
            {
                <partial name="_QuestionResult" model="questionResult" />
            }
        </div>
    </div>

    @{
        if (Model.QuestionBranchResults != null)
        {
            <div class="row">
                <h2>Results for department</h2>
            </div>

            <div class="row">
                <div class="branch-results-container col">
                    @foreach (var questionResult in Model.QuestionBranchResults)
                    {
                        <partial name="_QuestionResult" model="questionResult" />
                    }
                </div>
            </div>
        }
    }
</div>

@section Scripts {
    <script src="~/lib/Chart.js/chart.min.js"></script>
    <script src="~/lib/google-palette/palette.min.js"></script>

    <script type="text/javascript">
        let questionText = @Html.Raw(Json.Serialize(Model.QuestionResults.Select(qr => qr.Summary)));
        let questionAnswerText = @Html.Raw(Json.Serialize(Model.QuestionResults.Select(qr => qr.AnswerResults.Select(ar => ar.Text))));
        let questionAnswerResult = @Html.Raw(Json.Serialize(Model.QuestionResults.Select(qr => qr.AnswerResults.Select(ar => ar.Count))));

        function DrawCharts(container, results)
        {
            $(container).children().each(function (i) {
                var ctx = $(this).children('.chart-container').children('.chart-column').children('.chart');
                var pal = palette('mpn65', questionAnswerText[i].length).map(function (hex) {
                    return '#' + hex;
                });

                var chart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: questionAnswerText[i],
                        datasets: [{
                            label: questionText[i],
                            data: results[i],
                            backgroundColor: pal
                        }]
                    }
                })
            })
        }

        DrawCharts('.results-container', questionAnswerResult);

        @{
            if(Model.QuestionBranchResults != null)
                {
                    @:let questionAnswerBranchResult = @Html.Raw(Json.Serialize(Model.QuestionBranchResults.Select(qr => qr.AnswerResults.Select(ar => ar.Count))));

                    @:DrawCharts('.branch-results-container', questionAnswerBranchResult);
                }
        }
    </script>
}