@model QuickQuestions.Areas.Admin.Models.QuestionEditModel

@{
    ViewData["Title"] = "Create Question";
}

<h1>Create</h1>

<h4>Question</h4>
<hr />
<div class="row">
    <div class="col">
        <form asp-action="Create" id="questionForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-3">
                <label asp-for="SurveyID" class="control-label"></label>
                <select asp-for="SurveyID" class="form-control" asp-items="ViewBag.SurveyID"></select>
            </div>
            <div class="mb-3">
                <label asp-for="Text" class="control-label"></label>
                <input asp-for="Text" class="form-control" />
                <span asp-validation-for="Text" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Index" class="control-label"></label>
                <input asp-for="Index" class="form-control" />
                <span asp-validation-for="Index" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <div class="mb-1">
                    @Html.DisplayNameFor(model => model.Answers)
                </div>

                <partial name="_Answers" model="Model" />

                <div class="btn-group">
                    <input class="add-answer btn btn-success" type="button" value="Add Answer">
                    <input class="debug-answer btn btn-warning" type="button" value="Request Server Update">
                </div>
            </div>

            <div class="mb-3">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script language="javascript" type="text/javascript">
        const answer_index = "<input name='Answers.Index' type='hidden' value='";
        const index_end = "' />";

        function RecalculateAnswersIndexes(container)
        {
            container.children().each(function (index) {
                console.log(index);
                $(this).children(".index-edit").val(index);
            });
        }

        function MakeAnswersContainerSortable(container)
        {
            container.sortable({
                handle: ".answer-handle",
                cursor: "move",
                revert: 100,
                stop: function (event, ui) {
                    RecalculateAnswersIndexes(ui.item.parent());
                }
            });
        }

        MakeAnswersContainerSortable($(".answers-container"));

        $(document).ready(function () {
            $(document).on("click", ".add-answer", function () {
                var t = this;
                var data = $('#questionForm').serialize();

                $.ajax({
                    async: true,
                    data: data,
                    type: "POST",
                    url: 'AddAnswer',
                    success: function (partialView) {
                        //console.log(partialView);
                        $(t).parent().siblings(".answers-container").replaceWith(partialView);

                        var container = $(t).parent().siblings(".answers-container");

                        container.children().each(function (index) {
                            $(this).prepend(answer_index + index + index_end);
                        });

                        MakeAnswersContainerSortable(container);
                    }
                });
            });

            $(document).on("click", ".debug-answer", function () {
                var t = this;
                var data = $('#questionForm').serialize();

                $.ajax({
                    data: data,
                    type: "POST",
                    url: 'DebugAnswer',
                    success: function (partialView) {
                        $(t).parent().siblings(".answers-container").replaceWith(partialView);

                        var container = $(t).parent().siblings(".answers-container");

                        container.children().each(function (index) {
                            console.log(index);
                            $(this).prepend(answer_index + index + index_end);
                        });

                        MakeAnswersContainerSortable(container);
                    }
                });
            });

            $(document).on("click", ".remove-element", function () {
                $(this).parent().parent().remove();
            });
        });
    </script>
}
